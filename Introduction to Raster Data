#Raster Data 

#Note that raster data is also known as gridded data 
#With raster objects, data structures can be understood as containing
#layers, which are analagous to variables or features 

#Much like an sp object, raster objects contain a dataframe, spatial extent
#parameters, and a coordinate reference system 

#Creating a rasterlayer from scratch can help illustrate the process, but 
#these objects will typically be imported from a file 

r <- raster(ncol = 10, nrow = 10, xmx = -80, xmn = -150, ymn = 20, ymx = 60)

r

showDefault(r)

#This only creates a raster shape, let's fill in its substance with values

#Note that values and ncell are being called via the terra package thru raster

values(r) <- runif(ncell(r))

showDefault(r)

values(r) <- 1:ncell(r)

r

#Plot the raster

plot(r)

#Using the coordinate pair code from prior to create polygons and points for the raster

lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
pols <- spPolygons(lonlat, crs='+proj=longlat +datum=WGS84')
points(lonlat, col='red', pch=20, cex=3)
plot(pols, border='blue', lwd=2, add=TRUE)


#Raster with MultiLayer Objects 

#RasterBrick and RasterStack are the two multilayer raster objects
#Brick can only be linked to one file while stack can be linked to multiple

#Stack is the function used to create rasterStack objects


r2 <- r*r

r3 <- sqrt(r)

s <- stack(r, r2, r3)

s

plot(s)

#Stack objects can be converted into brick objects 

b <- brick(s)

b
